name: Parse Markdown and Generate JSON

on:
  push:
    branches:
      - main

jobs:
  parse_markdown:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.11
          node-version: '16'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bs4 markdown2 prettytable flake8

      - name: Run Flake8 (Linting)
        run: flake8 code/

      - name: Run Markdown Parser
        id: parse
        run: python code/markdown_to_json_parser.py
        working-directory: ${{ github.workspace }}
        continue-on-error: true

      - name: Upload JSON files
        uses: actions/upload-artifact@v2
        with:
          name: json_data
          path: ${{ github.workspace }}/json_data

      - name: Create SSH directory
        run: mkdir -p ~/.ssh

      - name: Set up SSH key
        run: |
          cat <<EOF > ~/.ssh/id_rsa
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOF
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Add GitHub to known hosts
        run: ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Commit and Push Changes
        if: github.event_name == 'push' && steps.parse.outcome == 'success'
        run: |
          git config --global user.email "dl_03.03.1991@mail.ru"
          git config --global user.name "Dmitry Ryumin"
          git remote add origin_with_ssh git@github.com:DmitryRyumin/WACV-2024-Papers.git
          git add .
          git commit -m "Upload JSON files"
          git push origin_with_ssh main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug Info
        run: |
          echo "SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY"
          cat ~/.ssh/id_rsa
          ssh -vT git@github.com

      - name: Set output status
        if: steps.parse.outcome == 'success'
        run: echo "status=success" >> $GITHUB_ENV
      - name: Set output status (failure)
        if: steps.parse.outcome == 'failure'
        run: echo "status=failure" >> $GITHUB_ENV
